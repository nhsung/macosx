brew install tmate


## @TMUX
tmate show-messages


## configuration
cat > ~/.tmate.conf
## Named Sessions - https://tmate.io/#api_key
#set tmate-api-key      "API_KEY"
set tmate-api-key      "tmk-zlZMQD82D7fwxXu86vSlOXZY54" # nhsung@gmail.com
#set tmate-api-key      "tmk-DhUUawpPdeRaxqWWMHjxVvvPvF" # nhsung2@naver.com

# set tmate-session-name-ro nhsung
set tmate-session-name "nhsung"

# SSH-Only
#set tmate-authorized-keys "~/.ssh/authorized_keys"
#Note that specifying an authorized keys file will disable web access.

# TMUX configuration
source-file ~/.tmux.conf


## CLI
tmate -F -n nhsung new-session zsh


## RESULT
web session: https://tmate.io/t/nhsung/nhsung
ssh session: ssh nhsung/nhsung@sfo2.tmate.io




#### BOOTING SCRIPTS
# https://medium.com/@fahimhossain_16989/adding-startup-scripts-to-launch-daemon-on-mac-os-x-sierra-10-12-6-7e0318c74de1

cd /Library/LaunchDaemons/

cat > com.startup.plist << END
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
  <!-- Launch Daemon do not always have access to all the  path variables
       As a results, scripts will sometimes fail if the you are using path variables inside them
       To enable the script to have access to all path variables, open up a terminal and type in -->
  <!-- echo $PATH -->
  <!-- You can opt to filter out some of the path variables which are not required by script-->
    <key>EnvironmentVariables</key>
    <dict>
      <key>PATH</key>
      <string>/usr/local/opt/icu4c/sbin:/usr/local/opt/icu4c/bin:/usr/local/opt/mariadb@10.1/bin/mysql:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/admin/go/bin</string>
    </dict>
    <key>Label</key>
    <!-- By convention, easy launchctl proccesses have unique name as an identifier. To follow naming convention the name of the file should be the same as the identifier name -->
    <string>com.startup</string>
    <key>Program</key>
    <!-- Full Path to the Script File. -->
    <string>/Users/nhsung/SynologyDrive/99_MACOS/SCRIPTS/startup.sh</string>
    <!-- This key is used to start the job as soon as it has been loaded. For daemons this means execution at boot time, for agents execution at login. -->
    <key>RunAtLoad</key>
    <true/>
    <!-- launchd may be used to make sure that a job is running depending on certain conditions. For this purpose we are setting it to false-->
    <key>KeepAlive</key>
    <false/>
    <!-- Set Launch Only Once to make sure, that it is not repeatedly started-->
    <key>LaunchOnlyOnce</key>        
    <true/>
    <!-- For debugging it is useful to print the output on a tmp file. While tweaking the script file with the script loaded onto the Daemon, it will echo script outputs-->
    <key>StandardOutPath</key>
    <string>/tmp/startup.stdout</string>
    <!-- For debugging it is useful to print the errors on a tmp file. While tweaking the script file with the script loaded onto the Daemon, it will print errors on this file-->
    <key>StandardErrorPath</key>
    <string>/tmp/startup.stderr</string>
    <!-- By default, Launch Daemon Process will run the script as root. But you still have the option to set the username and group to use while executing the script-->
    <key>UserName</key>
    <string>admin</string>
    <key>GroupName</key>
    <string>admin</string>
    <key>InitGroups</key>
    <true/>
  </dict>
</plist>
END

# -w flag permanently adds the plist to the Launch Daemon
sudo launchctl load -w /Library/LaunchDaemons/com.startup.plist

# -w flag permanently remove the plist to the Launch Daemon
# sudo launchctl unload -w /Library/LaunchDaemons/com.startup.plist

# Will only temporarily stop. It will again auto launch unless the service is explicitly stopped using launchctl unload command 
#mariadb stop
#
#You can stop the launchctl process by
#sudo launchctl stop /Library/LaunchDaemons/com.startup.plist

#You can start the launchctl process by
#sudo launchctl start -w /Library/LaunchDaemons/com.startup.plist
